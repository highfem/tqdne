"""Generate waveforms using the trained EDM model."""

import argparse
import sys
from dataclasses import dataclass

import h5py
import numpy as np
import pandas as pd
import torch as th
from tqdm import tqdm

from tqdne.autoencoder import LithningAutoencoder
from tqdne.edm import LightningEDM
from tqdne.representation import LogSpectrogram
from tqdne.utils import get_device


@dataclass
class LatentSpectrogramConfig:
    features_keys: tuple[str] = (
        "hypocentral_distance",
        "is_shallow_crustal",
        "magnitude",
        "vs30",
    )
    channels: int = 3
    fs: int = 100
    stft_channels: int = 256
    hop_size: int = 32
    representation = LogSpectrogram(stft_channels=stft_channels, hop_size=hop_size)
    t: int = 4096 - hop_size
    latent_channels: int = 4
    kl_weight: float = 1e-6


@th.no_grad()
def generate(
    hypocentral_distance,
    is_shallow_crustal,
    magnitude,
    vs30,
    num_samples,
    csv,
    output,
    batch_size,
    edm_checkpoint,
    autoencoder_checkpoint,
):
    print("Prepare conditional features...")
    if csv is not None:
        print("Using CSV file as input (discarding other possible parameters)")
        df = pd.read_csv(csv)
        df = df.loc[df.index.repeat(df.num_samples)]
        hypocentral_distances = df.hypocentral_distance.to_list()
        is_shallow_crustals = df.is_shallow_crustal.to_list()
        magnitudes = df.magnitude.to_list()
        vs30s = df.vs30.to_list()
    elif (
        hypocentral_distance is not None
        and is_shallow_crustal is not None
        and magnitude is not None
        and vs30 is not None
        and num_samples is not None
    ):
        print("Using command line parameters")
        hypocentral_distances = [hypocentral_distance] * num_samples
        is_shallow_crustals = [is_shallow_crustal] * num_samples
        magnitudes = [magnitude] * num_samples
        vs30s = [vs30] * num_samples
    else:
        raise ValueError("Provide either a CSV or a full parameter set")

    print("Loading model...")
    config = LatentSpectrogramConfig()
    device = get_device()
    autoencoder = None
    if autoencoder_checkpoint is not None:
        autoencoder = (
            LithningAutoencoder.load_from_checkpoint(autoencoder_checkpoint).to(device).eval()
        )
    edm = (
        LightningEDM.load_from_checkpoint(edm_checkpoint, autoencoder=autoencoder).to(device).eval()
    )

    # these are the summary statistics of the conditional features of the entire data set
    # we need them to normalize the inputs
    ss = np.array(
        [
            [1.15387660e02, 3.75770132e01],
            [2.48447079e-01, 4.32112402e-01],
            [5.09614190e00, 5.33373464e-01],
            [3.56826229e02, 2.08365895e02],
        ]
    )

    # normalize features
    hypocentral_distances_norm = (np.array(hypocentral_distances) - ss[0, 0]) / ss[0, 1]
    is_shallow_crustals_norm = (np.array(is_shallow_crustals) - ss[1, 0]) / ss[1, 1]
    magnitudes_norm = (np.array(magnitudes) - ss[2, 0]) / ss[2, 1]
    vs30s_norm = (np.array(vs30s) - ss[3, 0]) / ss[3, 1]

    cond = np.stack(
        [hypocentral_distances_norm, is_shallow_crustals_norm, magnitudes_norm, vs30s_norm], axis=1
    )

    print(f"Generating waveforms using {device}...")
    with h5py.File(output, "w") as f:
        f.create_dataset("hypocentral_distance", data=np.array(hypocentral_distances))
        f.create_dataset("is_shallow_crustal", data=np.array(is_shallow_crustals))
        f.create_dataset("magnitude", data=np.array(magnitudes))
        f.create_dataset("vs30", data=np.array(vs30s))
        waveforms = f.create_dataset("waveforms", (len(cond), 3, config.t))

        for i in tqdm(range(0, len(cond), batch_size)):
            cond_batch = cond[i : i + batch_size]
            shape = [len(cond_batch), 3, 128, 128]
            with th.no_grad():
                sample = edm.sample(
                    shape, cond=th.tensor(cond_batch, device=device, dtype=th.float32)
                )
            waveforms[i : i + batch_size] = config.representation.invert_representation(sample)
    print("Done!")


if __name__ == "__main__":
    desc = """Generate synthetic waveforms using the DWM.

Waveforms can be generated by specifying the arguments `hypocentral_distance`,
`is_shallow_crustal`, `magnitude`, and `vs30`. Alternatively, samples can be
generated by providing a CSV file of parameters in the following format:
```
hypocentral_distance,is_shallow_crustal,magnitude,vs30,num_samples
```
where `num_samples` is the number of samples to be generated for the given
parameter set, `is_shallow_crustal` is a boolean flag (0 or 1), and the rest
are floating-point values.
"""

    parser = argparse.ArgumentParser(
        description=desc, formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("--hypocentral_distance", type=float, default=None)
    parser.add_argument("--is_shallow_crustal", type=int, default=None)
    parser.add_argument("--magnitude", type=float, default=None)
    parser.add_argument("--vs30", type=float, default=None)
    parser.add_argument("--num_samples", type=int, default=None)
    parser.add_argument("--csv", type=str, default=None, help="csv file with args")
    parser.add_argument(
        "--output", type=str, help="Output file name with generated waveforms", required=True
    )
    parser.add_argument("--batch_size", type=int, default=32, help="Batch size")
    parser.add_argument("--edm_checkpoint", type=str, help="EDM checkpoint", required=True)
    parser.add_argument(
        "--autoencoder_checkpoint", type=str, help="Autoencoder checkpoint.", required=True
    )
    args = parser.parse_args()
    # check that either CSV or one of the params is given
    if args.csv is None and args.vs30 is None:
        parser.print_help()
        sys.exit(0)

    generate(
        args.hypocentral_distance,
        args.is_shallow_crustal,
        args.magnitude,
        args.vs30,
        args.num_samples,
        args.csv,
        args.output,
        args.batch_size,
        args.edm_checkpoint,
        args.autoencoder_checkpoint,
    )
